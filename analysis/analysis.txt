Your Name here	Paul Dellinger
Your NetID here	pd88


Questions here will come from the assignment
writeup. Be sure to copy paste questions and 
your explanations before you push to GitHub and
do that before uploading to Gradescope

Question 1: are the benchmark timings for StringStrand consistent 
with the explanation below that the time to execute cutAndSplice is O(b2S)?

Yes, at the higher values you can see as the splicee doubles, the time 
also approximately doubles. This fits the hypothesis that time is proportional
to s.

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.736	1290
StringStrand:	            512	      4,965,591	0.684	1290
StringStrand:	          1,024	      5,295,831	0.773	1290
StringStrand:	          2,048	      5,956,311	0.839	1290
StringStrand:	          4,096	      7,277,271	1.062	1290
StringStrand:	          8,192	      9,919,191	1.500	1290
StringStrand:	         16,384	     15,203,031	2.211	1290
StringStrand:	         32,768	     25,770,711	4.101	1290
StringStrand:	         65,536	     46,906,071	7.651	1290
StringStrand:	        131,072	     89,176,791	14.018	1290
StringStrand:	        262,144	    173,718,231	30.979	1290
StringStrand:	        524,288	    342,801,111	57.453	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at StringStrand.append(StringStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:37)
	at DNABenchmark.lambda$0(DNABenchmark.java:76)
	at DNABenchmark$$Lambda$140/461160828.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:79)
	at DNABenchmark.main(DNABenchmark.java:113)
	


Question 2: are the benchmark timings for StringBuilderStrand consistent 
with the explanation below that the time to execute cutAndSplice is O(bS)? 

The data are not consistent with this explanation, as at low splicee
counts the time is just as high as the increased splicee counts. The
lowest times are in the middle which isn't consistent with O(bs)
	
	
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.034	1290
StringBuilderStrand:	            512	      4,965,591	0.026	1290
StringBuilderStrand:	          1,024	      5,295,831	0.014	1290
StringBuilderStrand:	          2,048	      5,956,311	0.010	1290
StringBuilderStrand:	          4,096	      7,277,271	0.006	1290
StringBuilderStrand:	          8,192	      9,919,191	0.008	1290
StringBuilderStrand:	         16,384	     15,203,031	0.017	1290
StringBuilderStrand:	         32,768	     25,770,711	0.019	1290
StringBuilderStrand:	         65,536	     46,906,071	0.028	1290
StringBuilderStrand:	        131,072	     89,176,791	0.074	1290
StringBuilderStrand:	        262,144	    173,718,231	0.212	1290
StringBuilderStrand:	        524,288	    342,801,111	0.307	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.append(Unknown Source)
	at java.base/java.lang.StringBuilder.append(Unknown Source)
	at StringBuilderStrand.append(StringBuilderStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:68)
	at DNABenchmark.main(DNABenchmark.java:114)

 

Question 3: Explain why the time for LinkStrand does not change much at all over 
all the runs in the benchmark program. Explain why you think memory is exhausted 
at the specific strand size you see in your timings -- as compared to exhaustion for String and StringBuilder.


LinkStrand is O(1) to index characters when an adjacent character has been indexed, 
and is able to point to a repeated sequence without creating new memory space. 
It runs out of memory space because even with saving space pointing to the same
repeated sequences it still can run out of memory - the amount of unique strings 
is too high. 

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.029	1290
LinkStrand:	            512	      4,965,591	0.019	1290
LinkStrand:	          1,024	      5,295,831	0.004	1290
LinkStrand:	          2,048	      5,956,311	0.005	1290
LinkStrand:	          4,096	      7,277,271	0.007	1290
LinkStrand:	          8,192	      9,919,191	0.005	1290
LinkStrand:	         16,384	     15,203,031	0.004	1290
LinkStrand:	         32,768	     25,770,711	0.006	1290
LinkStrand:	         65,536	     46,906,071	0.007	1290
LinkStrand:	        131,072	     89,176,791	0.005	1290
LinkStrand:	        262,144	    173,718,231	0.004	1290
LinkStrand:	        524,288	    342,801,111	0.006	1290
LinkStrand:	      1,048,576	    680,966,871	0.006	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.006	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.010	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.006	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.007	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.006	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.006	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.008	1290
LinkStrand:	    268,435,456	173,145,504,471	0.007	1290
LinkStrand:	    536,870,912	346,286,373,591	0.009	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.append(Unknown Source)
	at java.base/java.lang.StringBuilder.append(Unknown Source)
	at DNABenchmark.main(DNABenchmark.java:110)


